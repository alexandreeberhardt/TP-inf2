import sqlite3
import pandas as pd

def main():
    try:
        # connexion a la BDD (création si elle n'existe pas)
        connexion = sqlite3.connect("alesc.sqlite")
        curseur = connexion.cursor()

        # Script de création de la table logeur
        requete_logeur = f'''CREATE TABLE IF NOT EXISTS `logeur` (
                                     `id_logeur` INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
                                     `nom` TEXT NULL,
                                     `prenom` TEXT NULL,
                                     `numero_rue` INTEGER NULL,
                                     `nom_rue` TEXT NULL,
                                     `code_postal` INTEGER NULL,
                                     `ville` TEXT NULL)'''

        curseur.execute(requete_logeur)  # Exécution de la requête

        requete_insert_logeur = '''INSERT INTO logeur (nom, prenom, numero_rue, nom_rue, code_postal, ville)
                                          VALUES (:nom, :prenom, :numero_rue, :nom_rue, :code_postal, :ville)'''

        data_logeur = pd.read_excel("logeurs.xlsx")

        for index, row in data_logeur.iterrows():
            nom = row['nom']
            prenom = row['prenom']
            numero_rue = row['numero_rue']
            nom_rue = row['nom_rue']
            code_postal = row['code_postal']
            ville = row['ville']
            valeurs_logeur = {
                'nom': nom,
                'prenom': prenom,
                'numero_rue': numero_rue,
                'nom_rue': nom_rue,
                'code_postal': code_postal,
                'ville': ville
            }

            curseur.execute(requete_insert_logeur, valeurs_logeur)

        # script de creation de la table logement
        requete_logement = f'''CREATE TABLE IF NOT EXISTS `logement` (
              `id_logement` INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
              `numero_rue` TEXT  NULL,
              `label` INTEGER  NULL,
              `nom_rue` TEXT  NULL,
              `code_postal` TEXT  NULL,
              `ville` TEXT  NULL,
              `type` TEXT  NULL,
              `id_logeur` INTEGER NULL,
              CONSTRAINT `fk_logement_logeur`
                FOREIGN KEY (`id_logeur`)  
                REFERENCES `logeur` (`id_logeur`)
                ON DELETE NO ACTION
                ON UPDATE NO ACTION)'''


        curseur.execute(requete_logement)  # execution de la requete
        requete_insert_logement = '''INSERT INTO logement (numero_rue, label, nom_rue, code_postal, ville, type, id_logeur)
                                    VALUES (:numero_rue, :label, :nom_rue, :code_postal, :ville, :type_logement, :id_logeur)'''

        data = pd.read_excel("logements.xlsx")

        # ...

        data = pd.read_excel("logements.xlsx")

        for index, row in data.iterrows():
            numero_rue = row['numero_rue']
            nom_rue = row['nom_rue']
            code_postal = row['code_postal']
            ville = row['ville']
            label = row['label']
            nom_logeur = row['nom_logeur']
            prenom_logeur = row['prenom_logeur']
            type_logement = row['type_logement']

            nom_prenom = {'nom_logeur': nom_logeur, 'prenom_logeur': prenom_logeur}
            select_id_logeur = '''SELECT id_logeur FROM logeur WHERE logeur.prenom=:prenom_logeur AND logeur.nom=:nom_logeur'''
            curseur.execute(select_id_logeur, nom_prenom)
            row = curseur.fetchone()  # Récupérer la ligne résultante
            if row:
                id_logeur = row[0]  # Extraire la valeur de l'ID à partir de la ligne

                valeurs = {
                    'numero_rue': numero_rue,
                    'nom_rue': nom_rue,
                    'code_postal': code_postal,
                    'ville': ville,
                    'label': label,
                    'nom_logeur': nom_logeur,
                    'prenom_logeur': prenom_logeur,
                    'type_logement': type_logement,
                    'id_logeur': id_logeur
                }

                curseur.execute(requete_insert_logement, valeurs)

        # CREATION DES AUTRES TABLES A FAIRE

        # Script de création de la table etudiant
        requete_etudiant = f'''CREATE TABLE IF NOT EXISTS `etudiant` (
                             `id_etudiant` INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
                             `nom` TEXT NULL,
                             `prenom` TEXT NULL,
                             `semestre` INTEGER NULL,
                             `id_logement` INTEGER NULL,
                                  CONSTRAINT `fk_etudiant_logement`
                                    FOREIGN KEY (`id_logement`)  
                                    REFERENCES `logement` (`id_logement`)
                                    ON DELETE NO ACTION
                                    ON UPDATE NO ACTION)'''

        curseur.execute(requete_etudiant)  # Exécution de la requête

        requete_insert_etudiant = '''INSERT INTO etudiant (nom, prenom, semestre,id_logement)
                                   VALUES (:nom, :prenom, :semestre, :id_logement)'''

        data_etudiant = pd.read_excel("etudiants.xlsx")

        for index, row in data_etudiant.iterrows():
            nom = row['nom']
            prenom = row['prenom']
            semestre = row['semestre']
            numero_rue = row['numero_rue']
            nom_rue = row['nom_rue']
            code_postal = row['code_postal']
            ville = row['ville']
            adresse = {'numero_rue': numero_rue, 'nom_rue': nom_rue,'code_postal':code_postal,'ville':ville}
            select_id_logement = '''SELECT id_logement FROM logement WHERE logement.nom_rue=:nom_rue AND logement.numero_rue=:numero_rue AND logement.code_postal=:code_postal AND logement.ville=:ville'''
            curseur.execute(select_id_logement, adresse)
            row = curseur.fetchone()  # Récupérer la ligne résultante
            id_logement = row[0]
            valeurs_etudiant = {
                'nom': nom,
                'prenom': prenom,
                'semestre': semestre,
                'code_postal': code_postal,
                'ville': ville,
                'id_logement':id_logement
            }

            curseur.execute(requete_insert_etudiant, valeurs_etudiant)

        connexion.commit()

    except FileNotFoundError:
        print("fichier inexistant")
    finally:
        if connexion:
            curseur.close()
            connexion.close()



if __name__ == '__main__':
    main()


