import csv

class Etudiant:
    """Classe Etudiant, qui represente un etudiant avec son nom(str), annee de naissance(int), gpa(float), et connaissance de python(bool)
    Il y a une methode to_dict qui cree un dictionnaire contenant les infos d'un etudiant
    Il y a une methode from_dict qui instancie un etudiant à partir d'un dictionnaire
    """
    def __init__(self, nom, annee_naissance, gpa, connais_python):
        self.nom = nom
        self.annee_naissance = annee_naissance
        self.gpa = gpa
        self.connais_python = connais_python

    @property
    def nom(self):
        return self._nom

    @property
    def annee_naissance(self):
        return self._annee_naissance

    @property
    def gpa(self):
        return self._gpa

    @property
    def connais_python(self):
        return self._connais_python

    @nom.setter
    def nom(self, nom):
        if not isinstance(nom, str):
            raise Exception("pas une chaîne de caractères")
        self._nom = nom

    @annee_naissance.setter
    def annee_naissance(self, annee_naissance):
        if not isinstance(annee_naissance, int):
            raise Exception("pas un entier")
        if annee_naissance > 2023:
            raise Exception("Annee future, donc impossible")
        self._annee_naissance = annee_naissance

    @gpa.setter
    def gpa(self, gpa):
        if not isinstance(gpa, float):
            raise Exception("pas un flottant")
        if gpa < 0 or gpa > 5:
            raise Exception("valeur non conforme")
        self._gpa = gpa

    @connais_python.setter
    def connais_python(self, connais_python):
        if not isinstance(connais_python, bool):
            raise Exception("pas un booleen")
        self._connais_python = connais_python

    def to_dict(self):
        #methode to_dict qui cree un dictionnaire contenant les infos d'un etudiant, renvoie un dictionnaire
        dico = {}
        dico["nom"] = self.nom
        dico["annee_naissance"] = self.annee_naissance
        dico["gpa"] = self.gpa
        dico["connais_python"] = self.connais_python
        return dico

    #methode statique from_dict qui instancie un etudiant à partir d'un dictionnaire et qui retourne un etudiant
    #On chosit une methode statique par ce que l'on instancie un objet de la classe Etudiant grâce à cette fonction, il n'y a donc pas de sens de le faire avant

    @staticmethod
    def from_dict(di):

        nom = di["nom"]
        annee_naissance = int(di["annee_naissance"])
        gpa = float(di["gpa"])
        connais_python = bool(di["connais_python"])

        return Etudiant(nom, annee_naissance, gpa, connais_python)


class Groupe:
    """Classe Groupe qui represente une liste d'etudiants
    Il y a une methode ajouter_etudiant
    Il y a une methode sauvegarder_csv
    Il y a une methode statique charger_csv
    """
    def __init__(self, liste):
        self.liste = liste
    #methode ajouter_etudiant qui permet d'ajouter un etudiant au groupe

    def ajouter_etudiant(self, etudiant):
        self.liste.append(etudiant)
    #methode sauvegarder_csv qui enregistre le groupe dans un fichier csv

    def sauvegarder_csv(self, chemin):
        with open(chemin, 'w', newline='') as csvfile:
            fieldnames = ['nom', 'annee_naissance', 'gpa', 'connais_python']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()

            for etudiant in self.liste:
                dico = etudiant.to_dict()
                writer.writerow({'nom': dico["nom"], 'annee_naissance': dico["annee_naissance"],
                                 'gpa': dico["gpa"], 'connais_python': dico["connais_python"]})
    #methode statique charger_csv qui cree un groupe à partir d'un fichier csv
    #On chosit une methode statique par ce que l'on instancie un objet de la classe Groupe grâce à cette fonction, il n'y a donc pas de sens de le faire avant

    @staticmethod
    def charger_csv(chemin):
        liste = []
        with open(chemin, 'r') as fichier:
            lecteur = csv.DictReader(fichier)

            for ligne in lecteur:
                etudiant = Etudiant.from_dict(ligne)
                liste.append(etudiant)

        return Groupe(liste)

groupe = Groupe([])
etudiant1 = Etudiant("Dupont", 2003, 2.5, True)
etudiant2 = Etudiant("Martin", 2002, 2.0, False)
data = {
    "nom": "Alexandre",
    "annee_naissance": 2003,
    "gpa": 5.0,
    "connais_python": True
}
alexandre = Etudiant.from_dict(data)

groupe.ajouter_etudiant(etudiant1)
groupe.ajouter_etudiant(etudiant2)
groupe.ajouter_etudiant(alexandre)
groupe.sauvegarder_csv("etudiants.csv")

v = Groupe([])
v = v.charger_csv("etudiants.csv")
print(v.liste)
